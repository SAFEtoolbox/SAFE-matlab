function Andres_plots(X,Y,X_ref,idx,fun_test) 
% 
% This function produces the sensitivity analysis plots first proposed by
% Andres (1997) and used for instance by Tang et al. (2007)
% to assess whether an input has no influence on the output.
%
% These are two scatter plots comparing three sets of output samples:
% Y: output samples generated by varying all inputs (set 'Y')
% Y1: output samples generated by varying all inputs but the i-th
% Y2: output samples generated by varying only the i-th input
%
% If the scatter plot (Y,Y1) aligns along the bisector and
% the scatter plot (Y,Y2) aligns along a horizontal line,
% this suggest that the i-th input is non-influential.
%
% Usage:
% Andres_plots(X,Y,X_ref,i,fun_test) 
%
%      X = set of input samples                              - matrix (N,M)
%      Y = set of output samples                             - vector (N,1)
%  X_ref = reference values for the inputs when not varying  - vector (1,M)
%      i = index of input to be analyzed                           - scalar
% fun_test = name of the function implementing the model: Y=f(X)   - string
%
% References:
%
% Andres, T.H. (1997). Sampling methods and sensitivity analysis for 
% large parameter sets. Journal of Statistical Computation and Simulation, 
% 57(1-4), 77--110.
%
% Tang, Y., Reed, P., Wagener, T., and van Werkhoven, K. (2007). Comparing 
% sensitivity analysis methods to advance lumped watershed model 
% identification and evaluation, Hydrol. Earth Syst. Sci., 11, 793-817.

% This function is part of the SAFE Toolbox by F. Pianosi, F. Sarrazin 
% and T. Wagener at Bristol University (2015). 
% SAFE is provided without any warranty and for non-commercial use only. 
% For more details, see the Licence file included in the root directory 
% of this distribution.
% For any comment and feedback, or to discuss a Licence agreement for 
% commercial use, please contact: francesca.pianosi@bristol.ac.uk
% For details on how to cite SAFE in your publication, please see: 
% bristol.ac.uk/cabot/resources/safe-toolbox/

% Options for the graphic:
fn = 'Helvetica' ; % font type of axes, labels, etc.
%fn = 'Courier' ;
fs = 20 ; % font size of axes, labels, etc.

[N,M]=size(X) ;
[n,m]=size(Y) ;
if N~=n; error('input ''X'' and ''Y'' must have the same number of rows'); end
if m~=1; error('input ''Y'' must be a column vector'); end
[n,m]=size(X_ref) ;
if M~=m; error('Input arguments ''X'' and ''X_ref'' must have the same number of columns'); end
if n~=1; error('Input argument ''X_ref'' must be a row vector'); end
if ~isscalar(idx); error('Input argument ''idx'' must be an integer scalar'); end
if ((idx)-floor(idx)); error('Input argument ''idx'' must be an integer scalar'); end
if idx>M; error('Input argument ''idx'' exceeds the number of columns in X'); end
    
X_1 = X ; X_1(:,idx) = X_ref(idx) ;
X_2 = repmat(X_ref,N,1) ; X_2(:,idx) = X(:,idx) ;
Y_1 = nan(N,1) ;
Y_2 = nan(N,1) ;
for k=1:N 
    Y_1(k) = feval(fun_test,X_1(k,:)) ;
    Y_2(k) = feval(fun_test,X_2(k,:)) ;
end
figure
mY = min(min(Y),min(Y_1)) ;
MY = max(max(Y),max(Y_1)) ;
%
subplot(121)
plot(Y,Y,'r',Y,Y_1,'.k')
axis([mY,MY,mY,MY])
xlabel('Y (all varying)','FontSize',fs,'FontName',fn)
ylabel(['Y1 (all varying but #' int2str(idx) ')'],'FontSize',fs,'FontName',fn)
set(gca,'FontSize',fs,'FontName',fn)
axis square
%
subplot(122)
plot(Y,Y,'r',Y,Y_2,'.k')
axis([mY,MY,mY,MY])
xlabel('Y (all varying)','FontSize',fs,'FontName',fn)
ylabel(['Y2 (only #' int2str(idx) ' varying)'],'FontSize',fs,'FontName',fn)
set(gca,'FontSize',fs,'FontName',fn)
axis square
